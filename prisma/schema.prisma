generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collection {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  name      String       @db.VarChar(255)
  slug      String       @unique
  parentId  Int?
  parent    Collection?  @relation("ParentChild", fields: [parentId], references: [id])
  children  Collection[] @relation("ParentChild")
  products  Product[]
}

model Product {
  id                 Int        @id @default(autoincrement())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  name               String     @db.VarChar(255)
  description        String
  price              Float
  discountPercentage Int        @default(0)
  deliveryFormat     String     @default("PSD, PNG files")
  isPublished        Boolean    @default(false)
  collectionId       Int
  slug               String     @unique
  collection         Collection @relation(fields: [collectionId], references: [id])
  imageURL           String
  sourceURL          String
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @default(USER)

  accounts Account[]
  sessions Session[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}
